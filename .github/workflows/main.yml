name: KernelSU Workflow
on:
  workflow_dispatch:
    inputs:
      kernel_version:
        description: 'Enter the kernel version'
        required: true
        default: ''
      boot_input:
        description: 'Enter the boot file URL'
        required: true
        default: ''

jobs:
  download_artifacts:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download KSUD and Manager Artifacts
      run: |
        KERNEL_VERSION="${{ github.event.inputs.kernel_version }}"
        BOOT_URL="${{ github.event.inputs.boot_input }}"
        
        # Download KSUD and Manager artifacts using the JavaScript script
        node -e "
          const github = require('@actions/github');
          const fs = require('fs');
          const fetch = require('node-fetch');

          async function downloadArtifact(url, filePath) {
            const response = await fetch(url, {
              method: 'GET',
              headers: { 'Authorization': `Bearer \${process.env.GITHUB_TOKEN}` }
            });
            const blob = await response.blob();
            const arrayBuffer = await new Response(blob).arrayBuffer();
            const buffer = Buffer.from(arrayBuffer);
            fs.writeFileSync(filePath, buffer);
          }

          async function getArtifacts() {
            const response = await github.request('GET /repos/tiann/KernelSU/actions/workflows/build-manager.yml/runs');
            const latestRunId = response.data.workflow_runs[0].id;
            const artifactsResponse = await github.request('GET /repos/tiann/KernelSU/actions/runs/\${latestRunId}/artifacts');
            const ksudArtifact = artifactsResponse.data.artifacts.find(artifact => artifact.name === 'ksud-x86_64-linux-android');
            const managerArtifact = artifactsResponse.data.artifacts.find(artifact => artifact.name === 'manager');
            await downloadArtifact(ksudArtifact.archive_download_url, 'ksud-x86_64-linux-android');
            await downloadArtifact(managerArtifact.archive_download_url, 'manager');
          }

          getArtifacts().catch(error => {
            console.error(error);
            process.exit(1);
          });
        "
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
