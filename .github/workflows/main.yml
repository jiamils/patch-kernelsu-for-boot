name: KernelSU Workflow

on: [push] # 你可以根据需要修改触发条件

jobs:
  build:
    runs-on: ubuntu-latest # 使用最新版的Ubuntu作为运行环境

    steps:
    - name: Set up kernel version input
      id: kernel_version
      run: echo "::set-output name=version::$(echo${{ github.event.inputs.kernel_version }})" # 设置输入值

    - name: Create patched file variable
      id: patched_file
      run: echo "::set-output name=patched_file::${{ steps.kernel_version.outputs.version }}_kernelsu.ko" # 创建变量

    - name: Download boot file
      uses: actions/download-artifact@v2
      with:
        name: ${{ steps.kernel_version.outputs.version }} # 使用input值作为文件名

    - name: Download magiskboot
      run: wget -O magiskboot https://example.com/magiskboot # 需要替换为实际的下载链接

    - name: Download KernelSU ko file
      uses: actions/github-script@v3
      with:
        script: |
          const response = await github.request('GET /repos/tiann/KernelSU/actions/workflows/build-lkm.yml/runs')
          const latestRunId = response.data.workflow_runs[0].id
          const artifactsResponse = await github.request('GET /repos/tiann/KernelSU/actions/runs/' + latestRunId + '/artifacts')
          const artifactDownloadUrl = artifactsResponse.data.artifacts.find(artifact => artifact.name == '${{ steps.patched_file.outputs.patched_file }}').archive_download_url
          await fetch(artifactDownloadUrl, { method: 'GET', headers: { 'Authorization': `Bearer ${process.env.GITHUB_TOKEN}` } })
          .then(response => response.blob())
          .then(blob => {
            const fileReader = new FileReader()
            fileReader.onload = event => {
              require('fs').writeFileSync('${{ steps.patched_file.outputs.patched_file }}', Buffer.from(new Uint8Array(event.target.result)))
            }
            fileReader.readAsArrayBuffer(blob)
          })
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download ksud and manager
      uses: actions/github-script@v3
      with:
        script: |
          const response = await github.request('GET /repos/tiann/KernelSU/actions/workflows/build-manager.yml/runs')
          const latestRunId = response.data.workflow_runs[0].id
          const artifactsResponse = await github.request('GET /repos/tiann/KernelSU/actions/runs/' + latestRunId + '/artifacts')
          const ksudArtifact = artifactsResponse.data.artifacts.find(artifact => artifact.name == 'ksud-x86_64-linux-android')
          const managerArtifact = artifactsResponse.data.artifacts.find(artifact => artifact.name == 'manager')
          const ksudDownloadUrl = ksudArtifact.archive_download_url
          const managerDownloadUrl = managerArtifact.archive_download_url
          await Promise.all([
            fetch(ksudDownloadUrl, { method: 'GET', headers: { 'Authorization': `Bearer ${process.env.GITHUB_TOKEN}` } })
            .then(response => response.blob())
            .then(blob => {
              const fileReader = new FileReader()
              fileReader.onload = event => {
                require('fs').writeFileSync('ksud-x86_64-linux-android', Buffer.from(new Uint8Array(event.target.result)))
              }
              fileReader.readAsArrayBuffer(blob)
            }),
            fetch(managerDownloadUrl, { method: 'GET', headers: { 'Authorization': `Bearer ${process.env.GITHUB_TOKEN}` } })
            .then(response => response.blob())
            .then(blob => {
              const fileReader = new FileReader()
              fileReader.onload = event => {
                require('fs').writeFileSync('manager', Buffer.from(new Uint8Array(event.target.result)))
              }
              fileReader.readAsArrayBuffer(blob)
            })
          ])
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
